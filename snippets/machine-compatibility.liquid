{%- comment -%}
  Machine Compatibility selector for Impact (Maestroo) and other OS2.0 themes.

  Expects a product metafield:
  - Namespace/key: custom.machine_compatibility
  - Type: list.single_line_text  (List â†’ Text)

  Saves selection to: line item property "Machine model"

  Notes:
  - Must be included INSIDE the product form so it posts with add-to-cart.
  - Script auto-detects the parent form (no Dawn-specific IDs).
{%- endcomment -%}

{%- assign mc = product.metafields.custom.machine_compatibility -%}
{%- assign mc_list = mc.value | default: mc -%}

{%- if mc_list and mc_list.size > 0 -%}
  <div class="renvo-machine-compatibility" data-renvo-mc>
    <label class="form__label" for="renvo-mc-select-{{ section.id | default: block.id | default: product.id }}">Machine model</label>

    <select
      id="renvo-mc-select-{{ section.id | default: block.id | default: product.id }}"
      class="select"
      name="properties[Machine model]"
      {% if product_form_id %}form="{{ product_form_id }}"{% endif %}
      required
      aria-describedby="renvo-mc-help-{{ section.id | default: block.id | default: product.id }}"
    >
      <option value="" selected disabled>Select your machine</option>
      {%- for item in mc_list -%}
        <option value="{{ item | escape }}">{{ item }}</option>
      {%- endfor -%}
    </select>

    <div id="renvo-mc-help-{{ section.id | default: block.id | default: product.id }}" class="renvo-mc-help">
      Choose the exact hardware this wrap will fit.
    </div>
    <p class="renvo-mc-error" hidden>Please choose your machine model.</p>
  </div>

  <script>
    (function() {
      const root = document.currentScript.closest('[data-renvo-mc]');
      if (!root) return;

      const select = root.querySelector('select[name="properties[Machine model]"]');
      if (!select) return;

      // Prefer explicit form by id (works when selector is outside the form)
      const formById = document.getElementById('{{ product_form_id | escape }}');
      // Fallback: nearest form that posts to /cart/add
      const form = formById || root.closest('form[action*="/cart/add"]');
      if (!form) return;

      const addToCartBtn =
        form.querySelector('button[type="submit"][name="add"], button[name="add"], [type="submit"][data-add-to-cart], [data-product-add-to-cart]') ||
        form.querySelector('button[type="submit"], [type="submit"]');
      const errorEl = root.querySelector('.renvo-mc-error');

      // Preselect via ?machine=
      try {
        const params = new URLSearchParams(window.location.search);
        const preset = params.get('machine');
        if (preset) {
          for (const opt of select.options) {
            if (opt.value && opt.value.toLowerCase() === preset.toLowerCase()) {
              opt.selected = true;
              break;
            }
          }
        }
      } catch (e) {}

      function validate() {
        const valid = !!select.value;
        if (errorEl) errorEl.hidden = valid;
        if (addToCartBtn && !addToCartBtn.hasAttribute('data-disabled-by-theme')) {
          addToCartBtn.disabled = !valid;
        }
        return valid;
      }

      if (addToCartBtn && addToCartBtn.disabled) {
        addToCartBtn.setAttribute('data-disabled-by-theme', 'true');
      }

      validate();
      select.addEventListener('change', validate);

      form.addEventListener('submit', function(e) {
        if (!validate()) {
          e.preventDefault();
          select.focus();
        }
      }, true);
    })();
  </script>
{%- endif -%}
